--------------------------------------------------------------------------------
Notes on the new database system
--------------------------------------------------------------------------------

CHANGES IN THE ARCHITECTURE
---------------------------

The architecture is now three-tier. For more information, consult the file doc/new-DB-architecture.

CHANGES IN THE TABLE STRUCTURE
------------------------------

PSVNs have been added to the set_user table, eliminating the need for a separate PSVN table.

set_user and problem_user tables have been added, containing student-specific data. In most cases, the override fields (marked `!' above) will be empty. The dynamic fields (marked `~' above) will be populated as the student works through problems. problem_seed (in problem_user) and psvn(in set_user) are neither  dynamic or override fields -- they are set at assignment time.

a problem_order field has been added to the set and set_user tables. It contains a definition of how the problems in each set will be ordered.

RECORD CREATION DEPENDANCIES
----------------------------

    password -> user
  permission -> user
         key -> user
	user -> 
         set -> 
    set_user -> user, set
     problem -> set
problem_user -> set_user, problem

RECORD DELETION DEPENDANCIES
----------------------------

    password -> 
  permission -> 
         key -> 
        user -> password permission key set_user
         set -> set_user problem
    set_user -> problem_user
     problem -> problem_user
problem_user -> 

TABLE STRUCTURE IMPLEMENTATION IN HASH-BASED DATABASES
------------------------------------------------------

The GeneralHash schema module will implement a new table structure implementation for use with WeBWorK 2. Classlist1Hash, Auth1Hash, and WW1Hash will use the old implementation.

Each table will be stored in a separate database file. Each table has one or more fields that make up a unique identifier for each record. In the case of a one field identifier, the value of that field will be used as the record's key in the hash. In the case of a two-field identifier, the string "FIELD1:FIELD2" will be used. Literal colons will be escaped as `\:', and literal backslashes as `\\'.

Rather than use a custom encoding scheme for the hash data, as is done in the 1.x implementation, a simple table-based scheme will be used, in which each field is separated by a colon (`:'). Literal colons (and literal backslashes) will be dealt with as above. This sort of scheme is common in the UNIX world. For example, consider the UNIX password file.

COMPATABILITY WITH 1.X DATABASES
--------------------------------

By specifying the WW1Hash schema module for the appropriate tables, 1.x databases can be handled.

Conversion of 1.x databases to 2.x databases can be achieved by using the most popular value for each field in each user-specific record as the global value, and merging PSVNs from the separate PSVN table. Conversion from 2.x databases to 1.x databases is trivial, if somewhat lossy (i.e. problem_order).

TREATMENT OF THE CURRENT API
----------------------------

The current API (implemented by Auth.pm, Classlist.pm, and WW.pm) will be removed. The code base is currently small enough that it will be easy to migrate existing code to the new API.

NEW API FUNCTIONS
-----------------

The new API is outlined in the file doc/new-DB-API.
