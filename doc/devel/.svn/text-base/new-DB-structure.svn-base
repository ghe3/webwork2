--------------------------------------------------------------------------------
DB table structure
--------------------------------------------------------------------------------

The DB API models an underlying table structure that may or may not literally exist, depending on what transformations the schema modules make. However, this is the table structure that is presented to users of the DB module.

The order of key fields in this list is the order that arguments should be passed to the exists(), get(), and delete() schema functions, and the order of the values in the return value of the list() schema function.

*  indicates a key
=> indicates a relation
!  indicates an override field
~  indicates a "dynamic" field (modified by the problem processor)

password
	user_id		*,=> user.id
	password
permission
	user_id		*,=> user.id
	permission
key
	user_id		*,=> user.id
	key
user
	id		*
	first_name
	last_name
	email_address
	student_id
	status
	section
	recitation
	comment
set
	id		*
	set_header
	problem_header
	open_date
	due_date
	answer_date
	problem_order		(not implemented)
set_user
	user_id		*,=> user.id
	set_id		*,=> set.id
	psvn
	set_header	!
	problem_header	!
	open_date	!
	due_date	!
	answer_date	!
	problem_order	!	(not implemented)
problem
	id		*
	set_id		*,=> set.id
	source_file
	value
	max_attempts
problem_user
	user_id		*,=> user.id
	set_id		*,=> set.id
	problem_id	*,=> problem.id
	source_file	!
	value		!
	max_attempts	!
	problem_seed
	status		~
	attempted	~
	last_answer	~
	num_correct	~
	num_incorrect	~
