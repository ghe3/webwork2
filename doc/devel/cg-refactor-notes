--------------------------------------------------------------------------------
currently, ContentGenerators do several things:
--------------------------------------------------------------------------------

display lists of objects and object details ("displays")
prompt for list filtering ("display filters")
prompt for creating, editing, and deleting objects ("action triggers")
create, edit, and delete objects ("actions")

--------------------------------------------------------------------------------
goals:
--------------------------------------------------------------------------------

have a chunk of code that takes care of each "action"
avoid duplication of code
preserve and "purify" noun-based URL path-info
have the noun-based path refer to the object or list being viewed

--------------------------------------------------------------------------------
changes to request format:
--------------------------------------------------------------------------------

Define some special parameters that are recognized by the dispatcher:

	"u" specifies the current user (i.e. the actual human using the system)
	"p" specifies the password of the current user
	"k" specifies the session key of the current user
	"a" specifies an action to perform (like "a=deleteUser")
	"o" specifies objects on which to perform an action (like "o=sh002i&o=dl001i")

We should reserve all single-letter parameter names.
(UPDATE: I changed my mind. Single-letter param names are unneccesarily
obfuscated and annnoying.)

We can't use <BUTTON TYPE="submit"> because of a longstanding bug in IE. To
avoid use of the value of an <INPUT TYPE="submit"> (which is displayed to the
user), we will also transform parameters as follows:

my ($name, $value) = $name =~ m/(.*?)\:(.*)/;

This way, we can encode both the name and value in the name of a button,
allowing us to say things like:

<INPUT TYPE="submit" NAME="a.problem.checkAnswers" VALUE="Check Answers" />
<INPUT TYPE="submit" NAME="a.problem.previewAnswers" VALUE="Preview Answers" />

We might also want to be able to put multiple parameters into a single name.
This would be a little more byzantine, but it might be worth it:

(UPDATE: can't use semicolon, since Apache treats `;' the same as `&'.)

my %params;
my @params = split m/\,/, $name;
foreach my $param (@params) {
	my ($name, $value) = $name =~ m/(.*?)\:(.*)/;
	push @{ $params{$name} }, $value;
}

This way, we could say this (for editing PG source):

<INPUT TYPE="submit" NAME="a:problemSource.saveTemp,display:interactive"
	VALUE="Preview Changes" />

resulting in the params "a=problemSource.saveTemp" and "display=interactive".

<INPUT TYPE="submit" NAME="a:problemSource.save,display:source;"
	VALUE="Commit Changes" />

resulting in the params "a=problemSource.save" and "display=source".

It seems weird, but It's a clever way to get around some of the limitations of
HTML forms. Most people would accomplish this using JavaScript, but I don't want
to do that.

--------------------------------------------------------------------------------
changes to the dispatcher:
--------------------------------------------------------------------------------

1. look at authentication parameters ("u", "p", "k"). possibly interrupt request
to authenticate.

2. use the "a" parameter to determine which (if any) action to potentially
perform.

3. use the URL path-info to determine which display to potentially use.

4. use...
	a table (display => multiple action trigger)
	(or)
	a "display"-specific layout template
	(or)
	whatever
		...to determine action triggers to potentially show.

5. filter the action, display, and action triggers trough a mask based on
permission level and other considerations.

6. if the action made it through the filter in step 5, execute it and display
the results. otherwise, display a "permission denied" error.

7. if the display made it through the filter in step 5, call it and display the
result. otherwise, display a "permission denied" error.

8. display any action triggers that made it through the filter in step 5. we
don't need to give an error for ones that didn't, since the user didn't ask for
them.

--------------------------------------------------------------------------------
path-info format
--------------------------------------------------------------------------------

abstract overview of what each path represents:

a   list of courses                                         /courses/
b   detail for $courseID                                    /courses/$courseID/

c   list of users of $courseID                              /courses/$courseID/users/
d   detail for $userID                                      /courses/$courseID/users/$userID/

e   list of abstract sets in $courseID                      /courses/$courseID/sets/
f   detail for abstract $setID                              /courses/$courseID/sets/$setID/
g   list of abstract problems in abstract $setID            /courses/$courseID/sets/$setID/problems/
h   detail for abstract $problemID in abstract $setID       /courses/$courseID/sets/$setID/problems/$problemID/

i   list of sets assigned to $userID                        /courses/$courseID/users/$userID/sets/
j   detail for $setID as assigned to $userID                /courses/$courseID/users/$userID/sets/$setID/
k   list of problems in $setID as assigned to $userID       /courses/$courseID/users/$userID/sets/$setID/problems/
l   detail for $problemID in $setID, as assigned to $userID /courses/$courseID/users/$userID/sets/$setID/problems/$problemID/

m   list of users to whom $setID is assigned                /courses/$courseID/sets/$setID/users/
n   detail for $setID as assigned to $userID                /courses/$courseID/sets/$setID/users/$userID/
o   list of users to whom $problemID in $setID is assigned  /courses/$courseID/sets/$setID/problems/$problemID/users/
p   detail for $problemID in $setID, as assigned to $userID /courses/$courseID/sets/$setID/problems/$problemID/users/$userID/

--------------------------------------------------------------------------------
displays
--------------------------------------------------------------------------------

"list" displays

	display a columnar list of objects
	toggle between "read-only" and "read-write" mode
	allow selection of one or more objects from the list for action triggers
	provide "display filters"

"detail" displays

	display a detailed representation of a single object
	toggle between "read-only" and "read-write" mode

read-only versus read-write mode determine how data is displayed. In read-only
mode, data is displayed as plain text. In read-write mode, data is displayed as
HTML form fields. (Dennis has a great system for abstracting this.)

a display in edit mode provides the form for editing records, but an action
trigger has to provide the ability to save those changes.

here are all of the displays i can thing of right now.

how to read this:
* the path in parenthesis denotes the TAIL of the URL path-info necessary to
invoke this display.
* a name preceeded by a plus or minus denotes whether an object ID of THAT TYPE
is present in the path BEFORE the TAIL of the path.
* a lower case letter denotes the line(s) from the abstract overview above that
correspond to this function of the display.

CourseList (.../courses/)
	a	list of courses

CourseDetail (.../courses/$courseID/)
	b	detail for a course

UserList (.../users/)
	c	-set, -problem: list of users
	m	+set, -problem: list of users assigned to given set
	o	+set, +problem: list of users assigned to given problem in given set

UserDetail (.../users/$userID/)
	d	detail of given user

SetList (.../sets/)
	e	-user: list of sets (abstract)
	i	+user: list of sets assigned to a given user

SetDetail (.../sets/$setID/)
	f	-user: detail of given set (abstract)
	j,n	+user: detail of given set as assigned to given user

ProblemList (.../sets/$setID/problems/)
	g	-user: list of problems in given set (abstract)
	k	+user: list of problems in given set as assigned to given user

ProblemDetail (.../sets/$setID/problems/$problemID/)
	h	-user: detail of given problem in given set (abstract)
	l,p	+user: detail of given problem in given set as assigned to given user

another dimmension of this (besides whether a user, set, or problem is
specified) is what permissions the user has. Restrictions available:

- limit particular records, read-only or no access
	TA can only modify users in her own recitation
	TA can't view users who are professors
	student can't view list of users, list of abstract sets/problems, etc.
- limit particular fields, read-only or no access
	student can't view his own "comments" field
	student can't edit most of the problem fields (/directly/)
	TA can't view student ID field

--------------------------------------------------------------------------------
multiple displays for the same object
--------------------------------------------------------------------------------

sometimes the display we want to show to a student and the display we want to
show a professor are much the same with some small changes -- the professor gets
edit mode and additional action triggers. but sometimes they are very different.
for example, when viewing a problem, a professor gets access to the raw problem
fields, the PG source, and a display of the rendered problem. a student, on the
other hand, gets only the display of the rendered problem.

it doesn't seem reasonable to have the same module have to handle all of these
differnt displays, so what about subclasses? in this example ProblemDetail would
have three subclasses: ProblemDetail::Raw, to handle the display of the raw
problem fields, ProblemDetail::Source, to display the problem source file, and
ProblemDetail::Rendered, to display the rendered version.

The base class would be a factory that would retun instances of the appropriate
subclass. It would also be useful to display a selector (maybe a tabbed
interface?) for selecting which subclass to use.

Should there be a way to display multiple displays at the same time? Probably.
The superclass can decide.

--------------------------------------------------------------------------------
auxiliary displays
--------------------------------------------------------------------------------

it occurs to me that we'd have to be able to support things like the siblings
list. how should we do this? perhaps with a subclass, as above? it would be
special, and not shown in any selector.

another related type of display is the summary: several displays will have
summaries suggesting the lists that are one level down in the heirarchy. These
summaries would provide some information about the class of objects involved,
and provide links to the full list. CourseDetail, for example, would have a
summary for users and a summary for sets. the users summary could say "there are
250 users in this course" and the sets summary could say "there are 16 sets in
this course".

i suppose this would be implemented the same way we implement the siblings list.

--------------------------------------------------------------------------------
actions
--------------------------------------------------------------------------------

actions are merely chunks of code that know how to perform a certain operation
on a certain type of data. many of them are wrappers around database access
calls, with error handling code added.

actions require access to the database and the course environment, the current
object (in path-info), and any request parameters required. request parameters
could be standardized by prefixing their names with the name of the action (like
"addUser.userID"), but then what would we do about actions that use the selected
items in a list view?

--------------------------------------------------------------------------------
action triggers
--------------------------------------------------------------------------------

action triggers are snippets of HTML that "call" an action (by providing a
submit button with the name "a"). each action trigger is tied to one or more
displays. for example, an action trigger that deletes a user can only be used
when a user or list of users is being displayed.

above I note that one could use a table of (display => action trigger) mappings
or a display-specific layout template to determine which triggers to show for a
particular display. if we use a layout template, we can spare the display of
having to know where to place action triggers.

An action trigger that would be put into the same form as a list of users:

<button type="submit" name="a" value="user.deleteList">
	Delete Selected Users
</button>

An action trigger that would be put onto a user detail page:

<button type="submit" name="a" value="user.deleteCurrent">
	Delete This User
</button>

--------------------------------------------------------------------------------
development plan
--------------------------------------------------------------------------------

1. write a "new" dispatcher
2. code display modules using display code from existing content generators
3. add actions and action triggers as needed, using code from existing content generators
4. ?
5. profit
